" Disable compatibility with vi which can cause unexpected issues.
set nocompatible
"let g:rustfmt_autosave = 1

" Plugins ------------------------------------------------------------ {{{
" Call before plug#begin(), downloads vim-plug for the plugins
let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/goyo.vim'
Plug 'rust-lang/rust.vim'
call plug#end()

" }}}

" Theme {{{
let g:gruvbox_contrast_dark = '(soft)'
autocmd vimenter * ++nested colorscheme gruvbox
set background=dark
"}}}

" Filetype  ------------------------------------------------------------ {{{

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on

" Enable plugins and load plugin for the detected file type.
" Load an indent file for the detected file type.
filetype plugin indent on
" }}}

" NerdTree {{{
let NERDTreeIgnore=['\.jpg$', '\.mp4$', '\.zip$', '\.iso$', '\.pdf$', '\.pyc$', '\.odt$', '\.png$', '\.gif$', '\.tar$', '\.gz$', '\.xz$', '\.bz2$', '\.tz$', '\.db$', '\.exe$', '\.odt$', '\xlsx$', '\docx$', '\.tar$', '\.rar$', '\.img$', '\.odt$', '\.m4a$', '\.bmp$', '\.ogg$', '\.mp3$', '\.gzip$', '\.flv$', '\.deb$', '\.rpm$']
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }
" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | execute 'cd '.argv()[0] | endif
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" }}}

" QOL stuffs ------------------------------------------------------------ {{{
"Status Line
set statusline=
set statusline+=\ %F\ %M\ %Y\ %R
set statusline+=%=
set statusline+=\ lines:\ %L

set number relativenumber
set nu rnu

set encoding=UTF-8
syntax on
set nobackup
set scrolloff=10

set expandtab
set tabstop=4
set nowrap

set showmode
set showcmd

" Search highlight and enhancements
set showmatch
""set hlsearch
set incsearch
set ignorecase
set smartcase

" This will enable code folding.
" Use the marker method of folding.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" }}}

" Wild menu and mode ------------------------------------------------------------ {{{

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" }}}

" Mappings --------------------------------------------------------------- {{{
nnoremap <SPACE> <Nop>
let mapleader = " "

nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>s :source ~/.vimrc<CR>
nnoremap <leader>gy :Goyo 90%x90%<CR>
nnoremap <leader>gq :Goyo!<CR>

" Better window nav in normal and insert
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
inoremap <c-j> <c-w>j
inoremap <c-k> <c-w>k
inoremap <c-h> <c-w>h
inoremap <c-l> <c-w>l

" Matching symbol
inoremap ( ()<esc>i
inoremap [ []<esc>i
inoremap { {}<esc>i
inoremap < <><esc>i
inoremap " ""<esc>i
inoremap ' ''<esc>i

" }}}

